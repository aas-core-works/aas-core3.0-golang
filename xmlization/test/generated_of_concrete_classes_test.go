package xmlization_test

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_xmlization_of_concrete_classes_test.py
// Do NOT edit or append.

import (
	"bytes"
	"encoding/xml"
	"fmt"
	aastesting "github.com/aas-core-works/aas-core3.0-golang/aastesting"
	aastypes "github.com/aas-core-works/aas-core3.0-golang/types"
	aasxmlization "github.com/aas-core-works/aas-core3.0-golang/xmlization"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"testing"
)

func TestExtensionRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"extension",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestExtensionDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"extension",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAdministrativeInformationRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"administrativeInformation",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAdministrativeInformationDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"administrativeInformation",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestQualifierRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"qualifier",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestQualifierDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"qualifier",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAssetAdministrationShellRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"assetAdministrationShell",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAssetAdministrationShellDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"assetAdministrationShell",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAssetInformationRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"assetInformation",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAssetInformationDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"assetInformation",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestResourceRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"resource",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestResourceDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"resource",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSpecificAssetIDRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"specificAssetId",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSpecificAssetIDDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"specificAssetId",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"submodel",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"submodel",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestRelationshipElementRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"relationshipElement",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestRelationshipElementDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"relationshipElement",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelElementListRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"submodelElementList",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelElementListDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"submodelElementList",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelElementCollectionRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"submodelElementCollection",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelElementCollectionDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"submodelElementCollection",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestPropertyRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"property",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestPropertyDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"property",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestMultiLanguagePropertyRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"multiLanguageProperty",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestMultiLanguagePropertyDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"multiLanguageProperty",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestRangeRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"range",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestRangeDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"range",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestReferenceElementRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"referenceElement",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestReferenceElementDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"referenceElement",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestBlobRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"blob",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestBlobDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"blob",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestFileRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"file",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestFileDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"file",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAnnotatedRelationshipElementRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"annotatedRelationshipElement",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAnnotatedRelationshipElementDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"annotatedRelationshipElement",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEntityRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"entity",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEntityDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"entity",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEventPayloadRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"SelfContained",
			"Expected",
			"eventPayload",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEventPayload); !ok {
			t.Fatalf(
				"Expected an instance of IEventPayload, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEventPayloadDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"SelfContained",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"eventPayload",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestBasicEventElementRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"basicEventElement",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestBasicEventElementDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"basicEventElement",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestOperationRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"operation",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestOperationDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"operation",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestOperationVariableRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"operationVariable",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestOperationVariableDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"operationVariable",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestCapabilityRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"capability",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestCapabilityDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"capability",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestConceptDescriptionRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"conceptDescription",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestConceptDescriptionDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"conceptDescription",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestReferenceRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"reference",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestReferenceDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"reference",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestKeyRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"key",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestKeyDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"key",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringNameTypeRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"langStringNameType",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringNameTypeDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"langStringNameType",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringTextTypeRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"langStringTextType",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringTextTypeDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"langStringTextType",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEnvironmentRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"SelfContained",
			"Expected",
			"environment",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEnvironmentDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"SelfContained",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"environment",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEmbeddedDataSpecificationRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"embeddedDataSpecification",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEmbeddedDataSpecificationDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"embeddedDataSpecification",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLevelTypeRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"levelType",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLevelTypeDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"levelType",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestValueReferencePairRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"valueReferencePair",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestValueReferencePairDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"valueReferencePair",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestValueListRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"valueList",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestValueListDeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"valueList",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringPreferredNameTypeIEC61360RoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"langStringPreferredNameTypeIec61360",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringPreferredNameTypeIEC61360DeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"langStringPreferredNameTypeIec61360",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringShortNameTypeIEC61360RoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"langStringShortNameTypeIec61360",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringShortNameTypeIEC61360DeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"langStringShortNameTypeIec61360",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringDefinitionTypeIEC61360RoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"langStringDefinitionTypeIec61360",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringDefinitionTypeIEC61360DeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"langStringDefinitionTypeIec61360",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestDataSpecificationIEC61360RoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Xml",
			"ContainedInEnvironment",
			"Expected",
			"dataSpecificationIec61360",
		),
		".xml",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		bb, err := os.ReadFile(pth)
		if err != nil {
			t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
			return
		}
		text := string(bb)

		decoder := xml.NewDecoder(strings.NewReader(text))

		deserialized, deseriaErr := aasxmlization.Unmarshal(decoder)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		if _, ok := deserialized.(aastypes.IEnvironment); !ok {
			t.Fatalf(
				"Expected an instance of IEnvironment, "+
					"but got %T: %v",
				deserialized, deserialized,
			)
			return
		}

		buf := &bytes.Buffer{}
		encoder := xml.NewEncoder(buf)
		encoder.Indent("", "\t")

		seriaErr := aasxmlization.Marshal(encoder, deserialized, true)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		roundTrip := string(buf.Bytes())

		ok = assertSerializationEqualsDeserialization(
			t,
			text,
			roundTrip,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestDataSpecificationIEC61360DeserializationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Xml",
		"ContainedInEnvironment",
		"Unexpected",
		"Unserializable",
		"*", // This asterisk represents the cause.
		"dataSpecificationIec61360",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".xml",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			bb, err := os.ReadFile(pth)
			if err != nil {
				t.Fatalf("Failed to read the file %s: %s", pth, err.Error())
				return
			}
			text := string(bb)

			decoder := xml.NewDecoder(strings.NewReader(text))

			_, deseriaErr := aasxmlization.Unmarshal(decoder)
			ok := assertIsDeserializationErrorAndEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_xmlization_of_concrete_classes_test.py
// Do NOT edit or append.
