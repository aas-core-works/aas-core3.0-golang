package jsonization_test

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_jsonization_of_concrete_classes_test.py
// Do NOT edit or append.

import (
	"fmt"
	aastesting "github.com/aas-core-works/aas-core3.0-golang/aastesting"
	aasjsonization "github.com/aas-core-works/aas-core3.0-golang/jsonization"
	"path/filepath"
	"sort"
	"testing"
)

func TestExtensionRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Extension",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestExtensionDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Extension",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAdministrativeInformationRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"AdministrativeInformation",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAdministrativeInformationDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"AdministrativeInformation",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestQualifierRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Qualifier",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestQualifierDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Qualifier",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAssetAdministrationShellRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"AssetAdministrationShell",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAssetAdministrationShellDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"AssetAdministrationShell",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAssetInformationRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"AssetInformation",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAssetInformationDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"AssetInformation",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestResourceRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Resource",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestResourceDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Resource",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSpecificAssetIDRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"SpecificAssetId",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSpecificAssetIDDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"SpecificAssetId",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Submodel",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Submodel",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestRelationshipElementRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"RelationshipElement",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestRelationshipElementDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"RelationshipElement",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelElementListRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"SubmodelElementList",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelElementListDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"SubmodelElementList",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelElementCollectionRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"SubmodelElementCollection",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelElementCollectionDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"SubmodelElementCollection",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestPropertyRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Property",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestPropertyDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Property",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestMultiLanguagePropertyRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"MultiLanguageProperty",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestMultiLanguagePropertyDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"MultiLanguageProperty",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestRangeRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Range",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestRangeDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Range",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestReferenceElementRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"ReferenceElement",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestReferenceElementDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"ReferenceElement",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestBlobRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Blob",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestBlobDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Blob",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestFileRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"File",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestFileDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"File",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAnnotatedRelationshipElementRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"AnnotatedRelationshipElement",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAnnotatedRelationshipElementDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"AnnotatedRelationshipElement",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEntityRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Entity",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEntityDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Entity",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEventPayloadRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"SelfContained",
			"Expected",
			"EventPayload",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EventPayloadFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEventPayloadDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"SelfContained",
				"Unexpected",
				cause,
				"EventPayload",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EventPayloadFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestBasicEventElementRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"BasicEventElement",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestBasicEventElementDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"BasicEventElement",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestOperationRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Operation",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestOperationDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Operation",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestOperationVariableRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"OperationVariable",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestOperationVariableDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"OperationVariable",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestCapabilityRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Capability",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestCapabilityDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Capability",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestConceptDescriptionRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"ConceptDescription",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestConceptDescriptionDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"ConceptDescription",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestReferenceRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Reference",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestReferenceDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Reference",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestKeyRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Key",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestKeyDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"Key",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringNameTypeRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringNameType",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringNameTypeDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"LangStringNameType",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringTextTypeRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringTextType",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringTextTypeDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"LangStringTextType",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEnvironmentRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"SelfContained",
			"Expected",
			"Environment",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEnvironmentDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"SelfContained",
				"Unexpected",
				cause,
				"Environment",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEmbeddedDataSpecificationRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"EmbeddedDataSpecification",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEmbeddedDataSpecificationDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"EmbeddedDataSpecification",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLevelTypeRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LevelType",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLevelTypeDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"LevelType",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestValueReferencePairRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"ValueReferencePair",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestValueReferencePairDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"ValueReferencePair",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestValueListRoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"ValueList",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestValueListDeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"ValueList",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringPreferredNameTypeIEC61360RoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringPreferredNameTypeIec61360",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringPreferredNameTypeIEC61360DeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"LangStringPreferredNameTypeIec61360",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringShortNameTypeIEC61360RoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringShortNameTypeIec61360",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringShortNameTypeIEC61360DeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"LangStringShortNameTypeIec61360",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringDefinitionTypeIEC61360RoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringDefinitionTypeIec61360",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringDefinitionTypeIEC61360DeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"LangStringDefinitionTypeIec61360",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestDataSpecificationIEC61360RoundTripOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"DataSpecificationIec61360",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		ok := assertNoDeserializationError(t, deseriaErr, pth)
		if !ok {
			return
		}

		anotherJsonable, seriaErr := aasjsonization.ToJsonable(deserialized)
		ok = assertNoSerializationError(t, seriaErr, pth)
		if !ok {
			return
		}

		ok = assertSerializationEqualsDeserialization(
			t,
			jsonable,
			anotherJsonable,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestDataSpecificationIEC61360DeserializationFail(t *testing.T) {
	for _, cause := range causesForDeserializationFailure {
		pths := aastesting.FindFilesBySuffixRecursively(
			filepath.Join(
				aastesting.TestDataDir,
				"Json",
				"ContainedInEnvironment",
				"Unexpected",
				cause,
				"DataSpecificationIec61360",
			),
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"DeserializationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".error",
			)

			_, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			ok := assertDeserializationErrorEqualsExpectedOrRecord(
				t, deseriaErr, pth, expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_jsonization_of_concrete_classes_test.py
// Do NOT edit or append.
