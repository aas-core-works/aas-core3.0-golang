package aastesting

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_deep_equal.py
// Do NOT edit or append.

import (
	"bytes"
	"fmt"
	aastypes "github.com/aas-core-works/aas-core3.0-golang/types"
)

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualExtension(
	that aastypes.IExtension,
	other aastypes.IExtension,
) bool {
	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatName := that.Name()
	otherName := other.Name()
	if thatName != otherName {
		return false
	}

	thatValueType := that.ValueType()
	otherValueType := other.ValueType()
	if (thatValueType == nil && otherValueType != nil) ||
		(thatValueType != nil && otherValueType == nil) {
		return false
	}
	if thatValueType != nil {
		if *thatValueType != *otherValueType {
			return false
		}
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if *thatValue != *otherValue {
			return false
		}
	}

	thatRefersTo := that.RefersTo()
	otherRefersTo := other.RefersTo()
	if (thatRefersTo == nil && otherRefersTo != nil) ||
		(thatRefersTo != nil && otherRefersTo == nil) {
		return false
	}
	if thatRefersTo != nil {
		if len(thatRefersTo) !=
			len(otherRefersTo) {
			return false
		}
		for i := range thatRefersTo {
			if !DeepEqual(
				thatRefersTo[i],
				otherRefersTo[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualAdministrativeInformation(
	that aastypes.IAdministrativeInformation,
	other aastypes.IAdministrativeInformation,
) bool {
	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatVersion := that.Version()
	otherVersion := other.Version()
	if (thatVersion == nil && otherVersion != nil) ||
		(thatVersion != nil && otherVersion == nil) {
		return false
	}
	if thatVersion != nil {
		if *thatVersion != *otherVersion {
			return false
		}
	}

	thatRevision := that.Revision()
	otherRevision := other.Revision()
	if (thatRevision == nil && otherRevision != nil) ||
		(thatRevision != nil && otherRevision == nil) {
		return false
	}
	if thatRevision != nil {
		if *thatRevision != *otherRevision {
			return false
		}
	}

	thatCreator := that.Creator()
	otherCreator := other.Creator()
	if (thatCreator == nil && otherCreator != nil) ||
		(thatCreator != nil && otherCreator == nil) {
		return false
	}
	if thatCreator != nil {
		if !DeepEqual(
			thatCreator,
			otherCreator,
		) {
			return false
		}
	}

	thatTemplateID := that.TemplateID()
	otherTemplateID := other.TemplateID()
	if (thatTemplateID == nil && otherTemplateID != nil) ||
		(thatTemplateID != nil && otherTemplateID == nil) {
		return false
	}
	if thatTemplateID != nil {
		if *thatTemplateID != *otherTemplateID {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualQualifier(
	that aastypes.IQualifier,
	other aastypes.IQualifier,
) bool {
	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatKind := that.Kind()
	otherKind := other.Kind()
	if (thatKind == nil && otherKind != nil) ||
		(thatKind != nil && otherKind == nil) {
		return false
	}
	if thatKind != nil {
		if *thatKind != *otherKind {
			return false
		}
	}

	thatType := that.Type()
	otherType := other.Type()
	if thatType != otherType {
		return false
	}

	thatValueType := that.ValueType()
	otherValueType := other.ValueType()
	if thatValueType != otherValueType {
		return false
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if *thatValue != *otherValue {
			return false
		}
	}

	thatValueID := that.ValueID()
	otherValueID := other.ValueID()
	if (thatValueID == nil && otherValueID != nil) ||
		(thatValueID != nil && otherValueID == nil) {
		return false
	}
	if thatValueID != nil {
		if !DeepEqual(
			thatValueID,
			otherValueID,
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualAssetAdministrationShell(
	that aastypes.IAssetAdministrationShell,
	other aastypes.IAssetAdministrationShell,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatAdministration := that.Administration()
	otherAdministration := other.Administration()
	if (thatAdministration == nil && otherAdministration != nil) ||
		(thatAdministration != nil && otherAdministration == nil) {
		return false
	}
	if thatAdministration != nil {
		if !DeepEqual(
			thatAdministration,
			otherAdministration,
		) {
			return false
		}
	}

	thatID := that.ID()
	otherID := other.ID()
	if thatID != otherID {
		return false
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatDerivedFrom := that.DerivedFrom()
	otherDerivedFrom := other.DerivedFrom()
	if (thatDerivedFrom == nil && otherDerivedFrom != nil) ||
		(thatDerivedFrom != nil && otherDerivedFrom == nil) {
		return false
	}
	if thatDerivedFrom != nil {
		if !DeepEqual(
			thatDerivedFrom,
			otherDerivedFrom,
		) {
			return false
		}
	}

	thatAssetInformation := that.AssetInformation()
	otherAssetInformation := other.AssetInformation()
	if !DeepEqual(
		thatAssetInformation,
		otherAssetInformation,
	) {
		return false
	}

	thatSubmodels := that.Submodels()
	otherSubmodels := other.Submodels()
	if (thatSubmodels == nil && otherSubmodels != nil) ||
		(thatSubmodels != nil && otherSubmodels == nil) {
		return false
	}
	if thatSubmodels != nil {
		if len(thatSubmodels) !=
			len(otherSubmodels) {
			return false
		}
		for i := range thatSubmodels {
			if !DeepEqual(
				thatSubmodels[i],
				otherSubmodels[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualAssetInformation(
	that aastypes.IAssetInformation,
	other aastypes.IAssetInformation,
) bool {
	thatAssetKind := that.AssetKind()
	otherAssetKind := other.AssetKind()
	if thatAssetKind != otherAssetKind {
		return false
	}

	thatGlobalAssetID := that.GlobalAssetID()
	otherGlobalAssetID := other.GlobalAssetID()
	if (thatGlobalAssetID == nil && otherGlobalAssetID != nil) ||
		(thatGlobalAssetID != nil && otherGlobalAssetID == nil) {
		return false
	}
	if thatGlobalAssetID != nil {
		if *thatGlobalAssetID != *otherGlobalAssetID {
			return false
		}
	}

	thatSpecificAssetIDs := that.SpecificAssetIDs()
	otherSpecificAssetIDs := other.SpecificAssetIDs()
	if (thatSpecificAssetIDs == nil && otherSpecificAssetIDs != nil) ||
		(thatSpecificAssetIDs != nil && otherSpecificAssetIDs == nil) {
		return false
	}
	if thatSpecificAssetIDs != nil {
		if len(thatSpecificAssetIDs) !=
			len(otherSpecificAssetIDs) {
			return false
		}
		for i := range thatSpecificAssetIDs {
			if !DeepEqual(
				thatSpecificAssetIDs[i],
				otherSpecificAssetIDs[i],
			) {
				return false
			}
		}
	}

	thatAssetType := that.AssetType()
	otherAssetType := other.AssetType()
	if (thatAssetType == nil && otherAssetType != nil) ||
		(thatAssetType != nil && otherAssetType == nil) {
		return false
	}
	if thatAssetType != nil {
		if *thatAssetType != *otherAssetType {
			return false
		}
	}

	thatDefaultThumbnail := that.DefaultThumbnail()
	otherDefaultThumbnail := other.DefaultThumbnail()
	if (thatDefaultThumbnail == nil && otherDefaultThumbnail != nil) ||
		(thatDefaultThumbnail != nil && otherDefaultThumbnail == nil) {
		return false
	}
	if thatDefaultThumbnail != nil {
		if !DeepEqual(
			thatDefaultThumbnail,
			otherDefaultThumbnail,
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualResource(
	that aastypes.IResource,
	other aastypes.IResource,
) bool {
	thatPath := that.Path()
	otherPath := other.Path()
	if thatPath != otherPath {
		return false
	}

	thatContentType := that.ContentType()
	otherContentType := other.ContentType()
	if (thatContentType == nil && otherContentType != nil) ||
		(thatContentType != nil && otherContentType == nil) {
		return false
	}
	if thatContentType != nil {
		if *thatContentType != *otherContentType {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualSpecificAssetID(
	that aastypes.ISpecificAssetID,
	other aastypes.ISpecificAssetID,
) bool {
	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatName := that.Name()
	otherName := other.Name()
	if thatName != otherName {
		return false
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if thatValue != otherValue {
		return false
	}

	thatExternalSubjectID := that.ExternalSubjectID()
	otherExternalSubjectID := other.ExternalSubjectID()
	if (thatExternalSubjectID == nil && otherExternalSubjectID != nil) ||
		(thatExternalSubjectID != nil && otherExternalSubjectID == nil) {
		return false
	}
	if thatExternalSubjectID != nil {
		if !DeepEqual(
			thatExternalSubjectID,
			otherExternalSubjectID,
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualSubmodel(
	that aastypes.ISubmodel,
	other aastypes.ISubmodel,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatAdministration := that.Administration()
	otherAdministration := other.Administration()
	if (thatAdministration == nil && otherAdministration != nil) ||
		(thatAdministration != nil && otherAdministration == nil) {
		return false
	}
	if thatAdministration != nil {
		if !DeepEqual(
			thatAdministration,
			otherAdministration,
		) {
			return false
		}
	}

	thatID := that.ID()
	otherID := other.ID()
	if thatID != otherID {
		return false
	}

	thatKind := that.Kind()
	otherKind := other.Kind()
	if (thatKind == nil && otherKind != nil) ||
		(thatKind != nil && otherKind == nil) {
		return false
	}
	if thatKind != nil {
		if *thatKind != *otherKind {
			return false
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatSubmodelElements := that.SubmodelElements()
	otherSubmodelElements := other.SubmodelElements()
	if (thatSubmodelElements == nil && otherSubmodelElements != nil) ||
		(thatSubmodelElements != nil && otherSubmodelElements == nil) {
		return false
	}
	if thatSubmodelElements != nil {
		if len(thatSubmodelElements) !=
			len(otherSubmodelElements) {
			return false
		}
		for i := range thatSubmodelElements {
			if !DeepEqual(
				thatSubmodelElements[i],
				otherSubmodelElements[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualRelationshipElement(
	that aastypes.IRelationshipElement,
	other aastypes.IRelationshipElement,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatFirst := that.First()
	otherFirst := other.First()
	if !DeepEqual(
		thatFirst,
		otherFirst,
	) {
		return false
	}

	thatSecond := that.Second()
	otherSecond := other.Second()
	if !DeepEqual(
		thatSecond,
		otherSecond,
	) {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualSubmodelElementList(
	that aastypes.ISubmodelElementList,
	other aastypes.ISubmodelElementList,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatOrderRelevant := that.OrderRelevant()
	otherOrderRelevant := other.OrderRelevant()
	if (thatOrderRelevant == nil && otherOrderRelevant != nil) ||
		(thatOrderRelevant != nil && otherOrderRelevant == nil) {
		return false
	}
	if thatOrderRelevant != nil {
		if *thatOrderRelevant != *otherOrderRelevant {
			return false
		}
	}

	thatSemanticIDListElement := that.SemanticIDListElement()
	otherSemanticIDListElement := other.SemanticIDListElement()
	if (thatSemanticIDListElement == nil && otherSemanticIDListElement != nil) ||
		(thatSemanticIDListElement != nil && otherSemanticIDListElement == nil) {
		return false
	}
	if thatSemanticIDListElement != nil {
		if !DeepEqual(
			thatSemanticIDListElement,
			otherSemanticIDListElement,
		) {
			return false
		}
	}

	thatTypeValueListElement := that.TypeValueListElement()
	otherTypeValueListElement := other.TypeValueListElement()
	if thatTypeValueListElement != otherTypeValueListElement {
		return false
	}

	thatValueTypeListElement := that.ValueTypeListElement()
	otherValueTypeListElement := other.ValueTypeListElement()
	if (thatValueTypeListElement == nil && otherValueTypeListElement != nil) ||
		(thatValueTypeListElement != nil && otherValueTypeListElement == nil) {
		return false
	}
	if thatValueTypeListElement != nil {
		if *thatValueTypeListElement != *otherValueTypeListElement {
			return false
		}
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if len(thatValue) !=
			len(otherValue) {
			return false
		}
		for i := range thatValue {
			if !DeepEqual(
				thatValue[i],
				otherValue[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualSubmodelElementCollection(
	that aastypes.ISubmodelElementCollection,
	other aastypes.ISubmodelElementCollection,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if len(thatValue) !=
			len(otherValue) {
			return false
		}
		for i := range thatValue {
			if !DeepEqual(
				thatValue[i],
				otherValue[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualProperty(
	that aastypes.IProperty,
	other aastypes.IProperty,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatValueType := that.ValueType()
	otherValueType := other.ValueType()
	if thatValueType != otherValueType {
		return false
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if *thatValue != *otherValue {
			return false
		}
	}

	thatValueID := that.ValueID()
	otherValueID := other.ValueID()
	if (thatValueID == nil && otherValueID != nil) ||
		(thatValueID != nil && otherValueID == nil) {
		return false
	}
	if thatValueID != nil {
		if !DeepEqual(
			thatValueID,
			otherValueID,
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualMultiLanguageProperty(
	that aastypes.IMultiLanguageProperty,
	other aastypes.IMultiLanguageProperty,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if len(thatValue) !=
			len(otherValue) {
			return false
		}
		for i := range thatValue {
			if !DeepEqual(
				thatValue[i],
				otherValue[i],
			) {
				return false
			}
		}
	}

	thatValueID := that.ValueID()
	otherValueID := other.ValueID()
	if (thatValueID == nil && otherValueID != nil) ||
		(thatValueID != nil && otherValueID == nil) {
		return false
	}
	if thatValueID != nil {
		if !DeepEqual(
			thatValueID,
			otherValueID,
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualRange(
	that aastypes.IRange,
	other aastypes.IRange,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatValueType := that.ValueType()
	otherValueType := other.ValueType()
	if thatValueType != otherValueType {
		return false
	}

	thatMin := that.Min()
	otherMin := other.Min()
	if (thatMin == nil && otherMin != nil) ||
		(thatMin != nil && otherMin == nil) {
		return false
	}
	if thatMin != nil {
		if *thatMin != *otherMin {
			return false
		}
	}

	thatMax := that.Max()
	otherMax := other.Max()
	if (thatMax == nil && otherMax != nil) ||
		(thatMax != nil && otherMax == nil) {
		return false
	}
	if thatMax != nil {
		if *thatMax != *otherMax {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualReferenceElement(
	that aastypes.IReferenceElement,
	other aastypes.IReferenceElement,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if !DeepEqual(
			thatValue,
			otherValue,
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualBlob(
	that aastypes.IBlob,
	other aastypes.IBlob,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if !bytes.Equal(
			thatValue,
			otherValue,
		) {
			return false
		}
	}

	thatContentType := that.ContentType()
	otherContentType := other.ContentType()
	if thatContentType != otherContentType {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualFile(
	that aastypes.IFile,
	other aastypes.IFile,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if *thatValue != *otherValue {
			return false
		}
	}

	thatContentType := that.ContentType()
	otherContentType := other.ContentType()
	if thatContentType != otherContentType {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualAnnotatedRelationshipElement(
	that aastypes.IAnnotatedRelationshipElement,
	other aastypes.IAnnotatedRelationshipElement,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatFirst := that.First()
	otherFirst := other.First()
	if !DeepEqual(
		thatFirst,
		otherFirst,
	) {
		return false
	}

	thatSecond := that.Second()
	otherSecond := other.Second()
	if !DeepEqual(
		thatSecond,
		otherSecond,
	) {
		return false
	}

	thatAnnotations := that.Annotations()
	otherAnnotations := other.Annotations()
	if (thatAnnotations == nil && otherAnnotations != nil) ||
		(thatAnnotations != nil && otherAnnotations == nil) {
		return false
	}
	if thatAnnotations != nil {
		if len(thatAnnotations) !=
			len(otherAnnotations) {
			return false
		}
		for i := range thatAnnotations {
			if !DeepEqual(
				thatAnnotations[i],
				otherAnnotations[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualEntity(
	that aastypes.IEntity,
	other aastypes.IEntity,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatStatements := that.Statements()
	otherStatements := other.Statements()
	if (thatStatements == nil && otherStatements != nil) ||
		(thatStatements != nil && otherStatements == nil) {
		return false
	}
	if thatStatements != nil {
		if len(thatStatements) !=
			len(otherStatements) {
			return false
		}
		for i := range thatStatements {
			if !DeepEqual(
				thatStatements[i],
				otherStatements[i],
			) {
				return false
			}
		}
	}

	thatEntityType := that.EntityType()
	otherEntityType := other.EntityType()
	if thatEntityType != otherEntityType {
		return false
	}

	thatGlobalAssetID := that.GlobalAssetID()
	otherGlobalAssetID := other.GlobalAssetID()
	if (thatGlobalAssetID == nil && otherGlobalAssetID != nil) ||
		(thatGlobalAssetID != nil && otherGlobalAssetID == nil) {
		return false
	}
	if thatGlobalAssetID != nil {
		if *thatGlobalAssetID != *otherGlobalAssetID {
			return false
		}
	}

	thatSpecificAssetIDs := that.SpecificAssetIDs()
	otherSpecificAssetIDs := other.SpecificAssetIDs()
	if (thatSpecificAssetIDs == nil && otherSpecificAssetIDs != nil) ||
		(thatSpecificAssetIDs != nil && otherSpecificAssetIDs == nil) {
		return false
	}
	if thatSpecificAssetIDs != nil {
		if len(thatSpecificAssetIDs) !=
			len(otherSpecificAssetIDs) {
			return false
		}
		for i := range thatSpecificAssetIDs {
			if !DeepEqual(
				thatSpecificAssetIDs[i],
				otherSpecificAssetIDs[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualEventPayload(
	that aastypes.IEventPayload,
	other aastypes.IEventPayload,
) bool {
	thatSource := that.Source()
	otherSource := other.Source()
	if !DeepEqual(
		thatSource,
		otherSource,
	) {
		return false
	}

	thatSourceSemanticID := that.SourceSemanticID()
	otherSourceSemanticID := other.SourceSemanticID()
	if (thatSourceSemanticID == nil && otherSourceSemanticID != nil) ||
		(thatSourceSemanticID != nil && otherSourceSemanticID == nil) {
		return false
	}
	if thatSourceSemanticID != nil {
		if !DeepEqual(
			thatSourceSemanticID,
			otherSourceSemanticID,
		) {
			return false
		}
	}

	thatObservableReference := that.ObservableReference()
	otherObservableReference := other.ObservableReference()
	if !DeepEqual(
		thatObservableReference,
		otherObservableReference,
	) {
		return false
	}

	thatObservableSemanticID := that.ObservableSemanticID()
	otherObservableSemanticID := other.ObservableSemanticID()
	if (thatObservableSemanticID == nil && otherObservableSemanticID != nil) ||
		(thatObservableSemanticID != nil && otherObservableSemanticID == nil) {
		return false
	}
	if thatObservableSemanticID != nil {
		if !DeepEqual(
			thatObservableSemanticID,
			otherObservableSemanticID,
		) {
			return false
		}
	}

	thatTopic := that.Topic()
	otherTopic := other.Topic()
	if (thatTopic == nil && otherTopic != nil) ||
		(thatTopic != nil && otherTopic == nil) {
		return false
	}
	if thatTopic != nil {
		if *thatTopic != *otherTopic {
			return false
		}
	}

	thatSubjectID := that.SubjectID()
	otherSubjectID := other.SubjectID()
	if (thatSubjectID == nil && otherSubjectID != nil) ||
		(thatSubjectID != nil && otherSubjectID == nil) {
		return false
	}
	if thatSubjectID != nil {
		if !DeepEqual(
			thatSubjectID,
			otherSubjectID,
		) {
			return false
		}
	}

	thatTimeStamp := that.TimeStamp()
	otherTimeStamp := other.TimeStamp()
	if thatTimeStamp != otherTimeStamp {
		return false
	}

	thatPayload := that.Payload()
	otherPayload := other.Payload()
	if (thatPayload == nil && otherPayload != nil) ||
		(thatPayload != nil && otherPayload == nil) {
		return false
	}
	if thatPayload != nil {
		if !bytes.Equal(
			thatPayload,
			otherPayload,
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualBasicEventElement(
	that aastypes.IBasicEventElement,
	other aastypes.IBasicEventElement,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatObserved := that.Observed()
	otherObserved := other.Observed()
	if !DeepEqual(
		thatObserved,
		otherObserved,
	) {
		return false
	}

	thatDirection := that.Direction()
	otherDirection := other.Direction()
	if thatDirection != otherDirection {
		return false
	}

	thatState := that.State()
	otherState := other.State()
	if thatState != otherState {
		return false
	}

	thatMessageTopic := that.MessageTopic()
	otherMessageTopic := other.MessageTopic()
	if (thatMessageTopic == nil && otherMessageTopic != nil) ||
		(thatMessageTopic != nil && otherMessageTopic == nil) {
		return false
	}
	if thatMessageTopic != nil {
		if *thatMessageTopic != *otherMessageTopic {
			return false
		}
	}

	thatMessageBroker := that.MessageBroker()
	otherMessageBroker := other.MessageBroker()
	if (thatMessageBroker == nil && otherMessageBroker != nil) ||
		(thatMessageBroker != nil && otherMessageBroker == nil) {
		return false
	}
	if thatMessageBroker != nil {
		if !DeepEqual(
			thatMessageBroker,
			otherMessageBroker,
		) {
			return false
		}
	}

	thatLastUpdate := that.LastUpdate()
	otherLastUpdate := other.LastUpdate()
	if (thatLastUpdate == nil && otherLastUpdate != nil) ||
		(thatLastUpdate != nil && otherLastUpdate == nil) {
		return false
	}
	if thatLastUpdate != nil {
		if *thatLastUpdate != *otherLastUpdate {
			return false
		}
	}

	thatMinInterval := that.MinInterval()
	otherMinInterval := other.MinInterval()
	if (thatMinInterval == nil && otherMinInterval != nil) ||
		(thatMinInterval != nil && otherMinInterval == nil) {
		return false
	}
	if thatMinInterval != nil {
		if *thatMinInterval != *otherMinInterval {
			return false
		}
	}

	thatMaxInterval := that.MaxInterval()
	otherMaxInterval := other.MaxInterval()
	if (thatMaxInterval == nil && otherMaxInterval != nil) ||
		(thatMaxInterval != nil && otherMaxInterval == nil) {
		return false
	}
	if thatMaxInterval != nil {
		if *thatMaxInterval != *otherMaxInterval {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualOperation(
	that aastypes.IOperation,
	other aastypes.IOperation,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatInputVariables := that.InputVariables()
	otherInputVariables := other.InputVariables()
	if (thatInputVariables == nil && otherInputVariables != nil) ||
		(thatInputVariables != nil && otherInputVariables == nil) {
		return false
	}
	if thatInputVariables != nil {
		if len(thatInputVariables) !=
			len(otherInputVariables) {
			return false
		}
		for i := range thatInputVariables {
			if !DeepEqual(
				thatInputVariables[i],
				otherInputVariables[i],
			) {
				return false
			}
		}
	}

	thatOutputVariables := that.OutputVariables()
	otherOutputVariables := other.OutputVariables()
	if (thatOutputVariables == nil && otherOutputVariables != nil) ||
		(thatOutputVariables != nil && otherOutputVariables == nil) {
		return false
	}
	if thatOutputVariables != nil {
		if len(thatOutputVariables) !=
			len(otherOutputVariables) {
			return false
		}
		for i := range thatOutputVariables {
			if !DeepEqual(
				thatOutputVariables[i],
				otherOutputVariables[i],
			) {
				return false
			}
		}
	}

	thatInoutputVariables := that.InoutputVariables()
	otherInoutputVariables := other.InoutputVariables()
	if (thatInoutputVariables == nil && otherInoutputVariables != nil) ||
		(thatInoutputVariables != nil && otherInoutputVariables == nil) {
		return false
	}
	if thatInoutputVariables != nil {
		if len(thatInoutputVariables) !=
			len(otherInoutputVariables) {
			return false
		}
		for i := range thatInoutputVariables {
			if !DeepEqual(
				thatInoutputVariables[i],
				otherInoutputVariables[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualOperationVariable(
	that aastypes.IOperationVariable,
	other aastypes.IOperationVariable,
) bool {
	thatValue := that.Value()
	otherValue := other.Value()
	if !DeepEqual(
		thatValue,
		otherValue,
	) {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualCapability(
	that aastypes.ICapability,
	other aastypes.ICapability,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatSemanticID := that.SemanticID()
	otherSemanticID := other.SemanticID()
	if (thatSemanticID == nil && otherSemanticID != nil) ||
		(thatSemanticID != nil && otherSemanticID == nil) {
		return false
	}
	if thatSemanticID != nil {
		if !DeepEqual(
			thatSemanticID,
			otherSemanticID,
		) {
			return false
		}
	}

	thatSupplementalSemanticIDs := that.SupplementalSemanticIDs()
	otherSupplementalSemanticIDs := other.SupplementalSemanticIDs()
	if (thatSupplementalSemanticIDs == nil && otherSupplementalSemanticIDs != nil) ||
		(thatSupplementalSemanticIDs != nil && otherSupplementalSemanticIDs == nil) {
		return false
	}
	if thatSupplementalSemanticIDs != nil {
		if len(thatSupplementalSemanticIDs) !=
			len(otherSupplementalSemanticIDs) {
			return false
		}
		for i := range thatSupplementalSemanticIDs {
			if !DeepEqual(
				thatSupplementalSemanticIDs[i],
				otherSupplementalSemanticIDs[i],
			) {
				return false
			}
		}
	}

	thatQualifiers := that.Qualifiers()
	otherQualifiers := other.Qualifiers()
	if (thatQualifiers == nil && otherQualifiers != nil) ||
		(thatQualifiers != nil && otherQualifiers == nil) {
		return false
	}
	if thatQualifiers != nil {
		if len(thatQualifiers) !=
			len(otherQualifiers) {
			return false
		}
		for i := range thatQualifiers {
			if !DeepEqual(
				thatQualifiers[i],
				otherQualifiers[i],
			) {
				return false
			}
		}
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualConceptDescription(
	that aastypes.IConceptDescription,
	other aastypes.IConceptDescription,
) bool {
	thatExtensions := that.Extensions()
	otherExtensions := other.Extensions()
	if (thatExtensions == nil && otherExtensions != nil) ||
		(thatExtensions != nil && otherExtensions == nil) {
		return false
	}
	if thatExtensions != nil {
		if len(thatExtensions) !=
			len(otherExtensions) {
			return false
		}
		for i := range thatExtensions {
			if !DeepEqual(
				thatExtensions[i],
				otherExtensions[i],
			) {
				return false
			}
		}
	}

	thatCategory := that.Category()
	otherCategory := other.Category()
	if (thatCategory == nil && otherCategory != nil) ||
		(thatCategory != nil && otherCategory == nil) {
		return false
	}
	if thatCategory != nil {
		if *thatCategory != *otherCategory {
			return false
		}
	}

	thatIDShort := that.IDShort()
	otherIDShort := other.IDShort()
	if (thatIDShort == nil && otherIDShort != nil) ||
		(thatIDShort != nil && otherIDShort == nil) {
		return false
	}
	if thatIDShort != nil {
		if *thatIDShort != *otherIDShort {
			return false
		}
	}

	thatDisplayName := that.DisplayName()
	otherDisplayName := other.DisplayName()
	if (thatDisplayName == nil && otherDisplayName != nil) ||
		(thatDisplayName != nil && otherDisplayName == nil) {
		return false
	}
	if thatDisplayName != nil {
		if len(thatDisplayName) !=
			len(otherDisplayName) {
			return false
		}
		for i := range thatDisplayName {
			if !DeepEqual(
				thatDisplayName[i],
				otherDisplayName[i],
			) {
				return false
			}
		}
	}

	thatDescription := that.Description()
	otherDescription := other.Description()
	if (thatDescription == nil && otherDescription != nil) ||
		(thatDescription != nil && otherDescription == nil) {
		return false
	}
	if thatDescription != nil {
		if len(thatDescription) !=
			len(otherDescription) {
			return false
		}
		for i := range thatDescription {
			if !DeepEqual(
				thatDescription[i],
				otherDescription[i],
			) {
				return false
			}
		}
	}

	thatAdministration := that.Administration()
	otherAdministration := other.Administration()
	if (thatAdministration == nil && otherAdministration != nil) ||
		(thatAdministration != nil && otherAdministration == nil) {
		return false
	}
	if thatAdministration != nil {
		if !DeepEqual(
			thatAdministration,
			otherAdministration,
		) {
			return false
		}
	}

	thatID := that.ID()
	otherID := other.ID()
	if thatID != otherID {
		return false
	}

	thatEmbeddedDataSpecifications := that.EmbeddedDataSpecifications()
	otherEmbeddedDataSpecifications := other.EmbeddedDataSpecifications()
	if (thatEmbeddedDataSpecifications == nil && otherEmbeddedDataSpecifications != nil) ||
		(thatEmbeddedDataSpecifications != nil && otherEmbeddedDataSpecifications == nil) {
		return false
	}
	if thatEmbeddedDataSpecifications != nil {
		if len(thatEmbeddedDataSpecifications) !=
			len(otherEmbeddedDataSpecifications) {
			return false
		}
		for i := range thatEmbeddedDataSpecifications {
			if !DeepEqual(
				thatEmbeddedDataSpecifications[i],
				otherEmbeddedDataSpecifications[i],
			) {
				return false
			}
		}
	}

	thatIsCaseOf := that.IsCaseOf()
	otherIsCaseOf := other.IsCaseOf()
	if (thatIsCaseOf == nil && otherIsCaseOf != nil) ||
		(thatIsCaseOf != nil && otherIsCaseOf == nil) {
		return false
	}
	if thatIsCaseOf != nil {
		if len(thatIsCaseOf) !=
			len(otherIsCaseOf) {
			return false
		}
		for i := range thatIsCaseOf {
			if !DeepEqual(
				thatIsCaseOf[i],
				otherIsCaseOf[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualReference(
	that aastypes.IReference,
	other aastypes.IReference,
) bool {
	thatType := that.Type()
	otherType := other.Type()
	if thatType != otherType {
		return false
	}

	thatReferredSemanticID := that.ReferredSemanticID()
	otherReferredSemanticID := other.ReferredSemanticID()
	if (thatReferredSemanticID == nil && otherReferredSemanticID != nil) ||
		(thatReferredSemanticID != nil && otherReferredSemanticID == nil) {
		return false
	}
	if thatReferredSemanticID != nil {
		if !DeepEqual(
			thatReferredSemanticID,
			otherReferredSemanticID,
		) {
			return false
		}
	}

	thatKeys := that.Keys()
	otherKeys := other.Keys()
	if len(thatKeys) !=
		len(otherKeys) {
		return false
	}
	for i := range thatKeys {
		if !DeepEqual(
			thatKeys[i],
			otherKeys[i],
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualKey(
	that aastypes.IKey,
	other aastypes.IKey,
) bool {
	thatType := that.Type()
	otherType := other.Type()
	if thatType != otherType {
		return false
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if thatValue != otherValue {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualLangStringNameType(
	that aastypes.ILangStringNameType,
	other aastypes.ILangStringNameType,
) bool {
	thatLanguage := that.Language()
	otherLanguage := other.Language()
	if thatLanguage != otherLanguage {
		return false
	}

	thatText := that.Text()
	otherText := other.Text()
	if thatText != otherText {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualLangStringTextType(
	that aastypes.ILangStringTextType,
	other aastypes.ILangStringTextType,
) bool {
	thatLanguage := that.Language()
	otherLanguage := other.Language()
	if thatLanguage != otherLanguage {
		return false
	}

	thatText := that.Text()
	otherText := other.Text()
	if thatText != otherText {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualEnvironment(
	that aastypes.IEnvironment,
	other aastypes.IEnvironment,
) bool {
	thatAssetAdministrationShells := that.AssetAdministrationShells()
	otherAssetAdministrationShells := other.AssetAdministrationShells()
	if (thatAssetAdministrationShells == nil && otherAssetAdministrationShells != nil) ||
		(thatAssetAdministrationShells != nil && otherAssetAdministrationShells == nil) {
		return false
	}
	if thatAssetAdministrationShells != nil {
		if len(thatAssetAdministrationShells) !=
			len(otherAssetAdministrationShells) {
			return false
		}
		for i := range thatAssetAdministrationShells {
			if !DeepEqual(
				thatAssetAdministrationShells[i],
				otherAssetAdministrationShells[i],
			) {
				return false
			}
		}
	}

	thatSubmodels := that.Submodels()
	otherSubmodels := other.Submodels()
	if (thatSubmodels == nil && otherSubmodels != nil) ||
		(thatSubmodels != nil && otherSubmodels == nil) {
		return false
	}
	if thatSubmodels != nil {
		if len(thatSubmodels) !=
			len(otherSubmodels) {
			return false
		}
		for i := range thatSubmodels {
			if !DeepEqual(
				thatSubmodels[i],
				otherSubmodels[i],
			) {
				return false
			}
		}
	}

	thatConceptDescriptions := that.ConceptDescriptions()
	otherConceptDescriptions := other.ConceptDescriptions()
	if (thatConceptDescriptions == nil && otherConceptDescriptions != nil) ||
		(thatConceptDescriptions != nil && otherConceptDescriptions == nil) {
		return false
	}
	if thatConceptDescriptions != nil {
		if len(thatConceptDescriptions) !=
			len(otherConceptDescriptions) {
			return false
		}
		for i := range thatConceptDescriptions {
			if !DeepEqual(
				thatConceptDescriptions[i],
				otherConceptDescriptions[i],
			) {
				return false
			}
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualEmbeddedDataSpecification(
	that aastypes.IEmbeddedDataSpecification,
	other aastypes.IEmbeddedDataSpecification,
) bool {
	thatDataSpecificationContent := that.DataSpecificationContent()
	otherDataSpecificationContent := other.DataSpecificationContent()
	if !DeepEqual(
		thatDataSpecificationContent,
		otherDataSpecificationContent,
	) {
		return false
	}

	thatDataSpecification := that.DataSpecification()
	otherDataSpecification := other.DataSpecification()
	if !DeepEqual(
		thatDataSpecification,
		otherDataSpecification,
	) {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualLevelType(
	that aastypes.ILevelType,
	other aastypes.ILevelType,
) bool {
	thatMin := that.Min()
	otherMin := other.Min()
	if thatMin != otherMin {
		return false
	}

	thatNom := that.Nom()
	otherNom := other.Nom()
	if thatNom != otherNom {
		return false
	}

	thatTyp := that.Typ()
	otherTyp := other.Typ()
	if thatTyp != otherTyp {
		return false
	}

	thatMax := that.Max()
	otherMax := other.Max()
	if thatMax != otherMax {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualValueReferencePair(
	that aastypes.IValueReferencePair,
	other aastypes.IValueReferencePair,
) bool {
	thatValue := that.Value()
	otherValue := other.Value()
	if thatValue != otherValue {
		return false
	}

	thatValueID := that.ValueID()
	otherValueID := other.ValueID()
	if !DeepEqual(
		thatValueID,
		otherValueID,
	) {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualValueList(
	that aastypes.IValueList,
	other aastypes.IValueList,
) bool {
	thatValueReferencePairs := that.ValueReferencePairs()
	otherValueReferencePairs := other.ValueReferencePairs()
	if len(thatValueReferencePairs) !=
		len(otherValueReferencePairs) {
		return false
	}
	for i := range thatValueReferencePairs {
		if !DeepEqual(
			thatValueReferencePairs[i],
			otherValueReferencePairs[i],
		) {
			return false
		}
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualLangStringPreferredNameTypeIEC61360(
	that aastypes.ILangStringPreferredNameTypeIEC61360,
	other aastypes.ILangStringPreferredNameTypeIEC61360,
) bool {
	thatLanguage := that.Language()
	otherLanguage := other.Language()
	if thatLanguage != otherLanguage {
		return false
	}

	thatText := that.Text()
	otherText := other.Text()
	if thatText != otherText {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualLangStringShortNameTypeIEC61360(
	that aastypes.ILangStringShortNameTypeIEC61360,
	other aastypes.ILangStringShortNameTypeIEC61360,
) bool {
	thatLanguage := that.Language()
	otherLanguage := other.Language()
	if thatLanguage != otherLanguage {
		return false
	}

	thatText := that.Text()
	otherText := other.Text()
	if thatText != otherText {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualLangStringDefinitionTypeIEC61360(
	that aastypes.ILangStringDefinitionTypeIEC61360,
	other aastypes.ILangStringDefinitionTypeIEC61360,
) bool {
	thatLanguage := that.Language()
	otherLanguage := other.Language()
	if thatLanguage != otherLanguage {
		return false
	}

	thatText := that.Text()
	otherText := other.Text()
	if thatText != otherText {
		return false
	}

	return true
}

// Perform a comparison for deep equality between `that` and `other` instance.
//
// The deep equality means that all the properties are checked for equality recursively.
func deepEqualDataSpecificationIEC61360(
	that aastypes.IDataSpecificationIEC61360,
	other aastypes.IDataSpecificationIEC61360,
) bool {
	thatPreferredName := that.PreferredName()
	otherPreferredName := other.PreferredName()
	if len(thatPreferredName) !=
		len(otherPreferredName) {
		return false
	}
	for i := range thatPreferredName {
		if !DeepEqual(
			thatPreferredName[i],
			otherPreferredName[i],
		) {
			return false
		}
	}

	thatShortName := that.ShortName()
	otherShortName := other.ShortName()
	if (thatShortName == nil && otherShortName != nil) ||
		(thatShortName != nil && otherShortName == nil) {
		return false
	}
	if thatShortName != nil {
		if len(thatShortName) !=
			len(otherShortName) {
			return false
		}
		for i := range thatShortName {
			if !DeepEqual(
				thatShortName[i],
				otherShortName[i],
			) {
				return false
			}
		}
	}

	thatUnit := that.Unit()
	otherUnit := other.Unit()
	if (thatUnit == nil && otherUnit != nil) ||
		(thatUnit != nil && otherUnit == nil) {
		return false
	}
	if thatUnit != nil {
		if *thatUnit != *otherUnit {
			return false
		}
	}

	thatUnitID := that.UnitID()
	otherUnitID := other.UnitID()
	if (thatUnitID == nil && otherUnitID != nil) ||
		(thatUnitID != nil && otherUnitID == nil) {
		return false
	}
	if thatUnitID != nil {
		if !DeepEqual(
			thatUnitID,
			otherUnitID,
		) {
			return false
		}
	}

	thatSourceOfDefinition := that.SourceOfDefinition()
	otherSourceOfDefinition := other.SourceOfDefinition()
	if (thatSourceOfDefinition == nil && otherSourceOfDefinition != nil) ||
		(thatSourceOfDefinition != nil && otherSourceOfDefinition == nil) {
		return false
	}
	if thatSourceOfDefinition != nil {
		if *thatSourceOfDefinition != *otherSourceOfDefinition {
			return false
		}
	}

	thatSymbol := that.Symbol()
	otherSymbol := other.Symbol()
	if (thatSymbol == nil && otherSymbol != nil) ||
		(thatSymbol != nil && otherSymbol == nil) {
		return false
	}
	if thatSymbol != nil {
		if *thatSymbol != *otherSymbol {
			return false
		}
	}

	thatDataType := that.DataType()
	otherDataType := other.DataType()
	if (thatDataType == nil && otherDataType != nil) ||
		(thatDataType != nil && otherDataType == nil) {
		return false
	}
	if thatDataType != nil {
		if *thatDataType != *otherDataType {
			return false
		}
	}

	thatDefinition := that.Definition()
	otherDefinition := other.Definition()
	if (thatDefinition == nil && otherDefinition != nil) ||
		(thatDefinition != nil && otherDefinition == nil) {
		return false
	}
	if thatDefinition != nil {
		if len(thatDefinition) !=
			len(otherDefinition) {
			return false
		}
		for i := range thatDefinition {
			if !DeepEqual(
				thatDefinition[i],
				otherDefinition[i],
			) {
				return false
			}
		}
	}

	thatValueFormat := that.ValueFormat()
	otherValueFormat := other.ValueFormat()
	if (thatValueFormat == nil && otherValueFormat != nil) ||
		(thatValueFormat != nil && otherValueFormat == nil) {
		return false
	}
	if thatValueFormat != nil {
		if *thatValueFormat != *otherValueFormat {
			return false
		}
	}

	thatValueList := that.ValueList()
	otherValueList := other.ValueList()
	if (thatValueList == nil && otherValueList != nil) ||
		(thatValueList != nil && otherValueList == nil) {
		return false
	}
	if thatValueList != nil {
		if !DeepEqual(
			thatValueList,
			otherValueList,
		) {
			return false
		}
	}

	thatValue := that.Value()
	otherValue := other.Value()
	if (thatValue == nil && otherValue != nil) ||
		(thatValue != nil && otherValue == nil) {
		return false
	}
	if thatValue != nil {
		if *thatValue != *otherValue {
			return false
		}
	}

	thatLevelType := that.LevelType()
	otherLevelType := other.LevelType()
	if (thatLevelType == nil && otherLevelType != nil) ||
		(thatLevelType != nil && otherLevelType == nil) {
		return false
	}
	if thatLevelType != nil {
		if !DeepEqual(
			thatLevelType,
			otherLevelType,
		) {
			return false
		}
	}

	return true
}

func DeepEqual(
	that aastypes.IClass,
	other aastypes.IClass,
) bool {
	if that.ModelType() != other.ModelType() {
		return false
	}

	switch that.ModelType() {
	case aastypes.ModelTypeExtension:
		return deepEqualExtension(
			that.(aastypes.IExtension),
			other.(aastypes.IExtension),
		)
	case aastypes.ModelTypeAdministrativeInformation:
		return deepEqualAdministrativeInformation(
			that.(aastypes.IAdministrativeInformation),
			other.(aastypes.IAdministrativeInformation),
		)
	case aastypes.ModelTypeQualifier:
		return deepEqualQualifier(
			that.(aastypes.IQualifier),
			other.(aastypes.IQualifier),
		)
	case aastypes.ModelTypeAssetAdministrationShell:
		return deepEqualAssetAdministrationShell(
			that.(aastypes.IAssetAdministrationShell),
			other.(aastypes.IAssetAdministrationShell),
		)
	case aastypes.ModelTypeAssetInformation:
		return deepEqualAssetInformation(
			that.(aastypes.IAssetInformation),
			other.(aastypes.IAssetInformation),
		)
	case aastypes.ModelTypeResource:
		return deepEqualResource(
			that.(aastypes.IResource),
			other.(aastypes.IResource),
		)
	case aastypes.ModelTypeSpecificAssetID:
		return deepEqualSpecificAssetID(
			that.(aastypes.ISpecificAssetID),
			other.(aastypes.ISpecificAssetID),
		)
	case aastypes.ModelTypeSubmodel:
		return deepEqualSubmodel(
			that.(aastypes.ISubmodel),
			other.(aastypes.ISubmodel),
		)
	case aastypes.ModelTypeRelationshipElement:
		return deepEqualRelationshipElement(
			that.(aastypes.IRelationshipElement),
			other.(aastypes.IRelationshipElement),
		)
	case aastypes.ModelTypeSubmodelElementList:
		return deepEqualSubmodelElementList(
			that.(aastypes.ISubmodelElementList),
			other.(aastypes.ISubmodelElementList),
		)
	case aastypes.ModelTypeSubmodelElementCollection:
		return deepEqualSubmodelElementCollection(
			that.(aastypes.ISubmodelElementCollection),
			other.(aastypes.ISubmodelElementCollection),
		)
	case aastypes.ModelTypeProperty:
		return deepEqualProperty(
			that.(aastypes.IProperty),
			other.(aastypes.IProperty),
		)
	case aastypes.ModelTypeMultiLanguageProperty:
		return deepEqualMultiLanguageProperty(
			that.(aastypes.IMultiLanguageProperty),
			other.(aastypes.IMultiLanguageProperty),
		)
	case aastypes.ModelTypeRange:
		return deepEqualRange(
			that.(aastypes.IRange),
			other.(aastypes.IRange),
		)
	case aastypes.ModelTypeReferenceElement:
		return deepEqualReferenceElement(
			that.(aastypes.IReferenceElement),
			other.(aastypes.IReferenceElement),
		)
	case aastypes.ModelTypeBlob:
		return deepEqualBlob(
			that.(aastypes.IBlob),
			other.(aastypes.IBlob),
		)
	case aastypes.ModelTypeFile:
		return deepEqualFile(
			that.(aastypes.IFile),
			other.(aastypes.IFile),
		)
	case aastypes.ModelTypeAnnotatedRelationshipElement:
		return deepEqualAnnotatedRelationshipElement(
			that.(aastypes.IAnnotatedRelationshipElement),
			other.(aastypes.IAnnotatedRelationshipElement),
		)
	case aastypes.ModelTypeEntity:
		return deepEqualEntity(
			that.(aastypes.IEntity),
			other.(aastypes.IEntity),
		)
	case aastypes.ModelTypeEventPayload:
		return deepEqualEventPayload(
			that.(aastypes.IEventPayload),
			other.(aastypes.IEventPayload),
		)
	case aastypes.ModelTypeBasicEventElement:
		return deepEqualBasicEventElement(
			that.(aastypes.IBasicEventElement),
			other.(aastypes.IBasicEventElement),
		)
	case aastypes.ModelTypeOperation:
		return deepEqualOperation(
			that.(aastypes.IOperation),
			other.(aastypes.IOperation),
		)
	case aastypes.ModelTypeOperationVariable:
		return deepEqualOperationVariable(
			that.(aastypes.IOperationVariable),
			other.(aastypes.IOperationVariable),
		)
	case aastypes.ModelTypeCapability:
		return deepEqualCapability(
			that.(aastypes.ICapability),
			other.(aastypes.ICapability),
		)
	case aastypes.ModelTypeConceptDescription:
		return deepEqualConceptDescription(
			that.(aastypes.IConceptDescription),
			other.(aastypes.IConceptDescription),
		)
	case aastypes.ModelTypeReference:
		return deepEqualReference(
			that.(aastypes.IReference),
			other.(aastypes.IReference),
		)
	case aastypes.ModelTypeKey:
		return deepEqualKey(
			that.(aastypes.IKey),
			other.(aastypes.IKey),
		)
	case aastypes.ModelTypeLangStringNameType:
		return deepEqualLangStringNameType(
			that.(aastypes.ILangStringNameType),
			other.(aastypes.ILangStringNameType),
		)
	case aastypes.ModelTypeLangStringTextType:
		return deepEqualLangStringTextType(
			that.(aastypes.ILangStringTextType),
			other.(aastypes.ILangStringTextType),
		)
	case aastypes.ModelTypeEnvironment:
		return deepEqualEnvironment(
			that.(aastypes.IEnvironment),
			other.(aastypes.IEnvironment),
		)
	case aastypes.ModelTypeEmbeddedDataSpecification:
		return deepEqualEmbeddedDataSpecification(
			that.(aastypes.IEmbeddedDataSpecification),
			other.(aastypes.IEmbeddedDataSpecification),
		)
	case aastypes.ModelTypeLevelType:
		return deepEqualLevelType(
			that.(aastypes.ILevelType),
			other.(aastypes.ILevelType),
		)
	case aastypes.ModelTypeValueReferencePair:
		return deepEqualValueReferencePair(
			that.(aastypes.IValueReferencePair),
			other.(aastypes.IValueReferencePair),
		)
	case aastypes.ModelTypeValueList:
		return deepEqualValueList(
			that.(aastypes.IValueList),
			other.(aastypes.IValueList),
		)
	case aastypes.ModelTypeLangStringPreferredNameTypeIEC61360:
		return deepEqualLangStringPreferredNameTypeIEC61360(
			that.(aastypes.ILangStringPreferredNameTypeIEC61360),
			other.(aastypes.ILangStringPreferredNameTypeIEC61360),
		)
	case aastypes.ModelTypeLangStringShortNameTypeIEC61360:
		return deepEqualLangStringShortNameTypeIEC61360(
			that.(aastypes.ILangStringShortNameTypeIEC61360),
			other.(aastypes.ILangStringShortNameTypeIEC61360),
		)
	case aastypes.ModelTypeLangStringDefinitionTypeIEC61360:
		return deepEqualLangStringDefinitionTypeIEC61360(
			that.(aastypes.ILangStringDefinitionTypeIEC61360),
			other.(aastypes.ILangStringDefinitionTypeIEC61360),
		)
	case aastypes.ModelTypeDataSpecificationIEC61360:
		return deepEqualDataSpecificationIEC61360(
			that.(aastypes.IDataSpecificationIEC61360),
			other.(aastypes.IDataSpecificationIEC61360),
		)
	}

	panic(fmt.Sprintf("Unexpected model type: %d", that.ModelType()))
}

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_deep_equal.py
// Do NOT edit or append.
