package aastesting

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_common_jsonization.py
// Do NOT edit or append.

import (
	"fmt"
	aasjsonization "github.com/aas-core-works/aas-core3.0-golang/jsonization"
	aastypes "github.com/aas-core-works/aas-core3.0-golang/types"
	"path"
)

// Load a maximal example of [aastypes.IExtension] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalExtension() (result aastypes.IExtension) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Extension",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindExtension(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IExtension] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalExtension() (result aastypes.IExtension) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Extension",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindExtension(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IAdministrativeInformation] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalAdministrativeInformation() (result aastypes.IAdministrativeInformation) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"AdministrativeInformation",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindAdministrativeInformation(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IAdministrativeInformation] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalAdministrativeInformation() (result aastypes.IAdministrativeInformation) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"AdministrativeInformation",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindAdministrativeInformation(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IQualifier] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalQualifier() (result aastypes.IQualifier) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Qualifier",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindQualifier(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IQualifier] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalQualifier() (result aastypes.IQualifier) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Qualifier",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindQualifier(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IAssetAdministrationShell] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalAssetAdministrationShell() (result aastypes.IAssetAdministrationShell) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"AssetAdministrationShell",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindAssetAdministrationShell(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IAssetAdministrationShell] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalAssetAdministrationShell() (result aastypes.IAssetAdministrationShell) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"AssetAdministrationShell",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindAssetAdministrationShell(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IAssetInformation] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalAssetInformation() (result aastypes.IAssetInformation) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"AssetInformation",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindAssetInformation(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IAssetInformation] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalAssetInformation() (result aastypes.IAssetInformation) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"AssetInformation",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindAssetInformation(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IResource] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalResource() (result aastypes.IResource) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Resource",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindResource(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IResource] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalResource() (result aastypes.IResource) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Resource",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindResource(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ISpecificAssetID] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalSpecificAssetID() (result aastypes.ISpecificAssetID) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"SpecificAssetId",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindSpecificAssetID(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ISpecificAssetID] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalSpecificAssetID() (result aastypes.ISpecificAssetID) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"SpecificAssetId",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindSpecificAssetID(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ISubmodel] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalSubmodel() (result aastypes.ISubmodel) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Submodel",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindSubmodel(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ISubmodel] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalSubmodel() (result aastypes.ISubmodel) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Submodel",
		"minimal.json",
	)

	fmt.Printf("Must read jsonable\n")
	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	fmt.Printf("container: %v\n", container)
	fmt.Printf("err: %v\n", err)

	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindSubmodel(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IRelationshipElement] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalRelationshipElement() (result aastypes.IRelationshipElement) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"RelationshipElement",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindRelationshipElement(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IRelationshipElement] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalRelationshipElement() (result aastypes.IRelationshipElement) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"RelationshipElement",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindRelationshipElement(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ISubmodelElementList] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalSubmodelElementList() (result aastypes.ISubmodelElementList) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"SubmodelElementList",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindSubmodelElementList(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ISubmodelElementList] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalSubmodelElementList() (result aastypes.ISubmodelElementList) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"SubmodelElementList",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindSubmodelElementList(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ISubmodelElementCollection] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalSubmodelElementCollection() (result aastypes.ISubmodelElementCollection) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"SubmodelElementCollection",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindSubmodelElementCollection(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ISubmodelElementCollection] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalSubmodelElementCollection() (result aastypes.ISubmodelElementCollection) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"SubmodelElementCollection",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindSubmodelElementCollection(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IProperty] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalProperty() (result aastypes.IProperty) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Property",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindProperty(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IProperty] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalProperty() (result aastypes.IProperty) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Property",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindProperty(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IMultiLanguageProperty] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalMultiLanguageProperty() (result aastypes.IMultiLanguageProperty) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"MultiLanguageProperty",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindMultiLanguageProperty(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IMultiLanguageProperty] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalMultiLanguageProperty() (result aastypes.IMultiLanguageProperty) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"MultiLanguageProperty",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindMultiLanguageProperty(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IRange] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalRange() (result aastypes.IRange) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Range",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindRange(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IRange] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalRange() (result aastypes.IRange) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Range",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindRange(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IReferenceElement] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalReferenceElement() (result aastypes.IReferenceElement) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"ReferenceElement",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindReferenceElement(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IReferenceElement] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalReferenceElement() (result aastypes.IReferenceElement) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"ReferenceElement",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindReferenceElement(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IBlob] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalBlob() (result aastypes.IBlob) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Blob",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindBlob(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IBlob] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalBlob() (result aastypes.IBlob) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Blob",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindBlob(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IFile] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalFile() (result aastypes.IFile) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"File",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindFile(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IFile] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalFile() (result aastypes.IFile) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"File",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindFile(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IAnnotatedRelationshipElement] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalAnnotatedRelationshipElement() (result aastypes.IAnnotatedRelationshipElement) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"AnnotatedRelationshipElement",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindAnnotatedRelationshipElement(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IAnnotatedRelationshipElement] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalAnnotatedRelationshipElement() (result aastypes.IAnnotatedRelationshipElement) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"AnnotatedRelationshipElement",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindAnnotatedRelationshipElement(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IEntity] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalEntity() (result aastypes.IEntity) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Entity",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindEntity(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IEntity] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalEntity() (result aastypes.IEntity) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Entity",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindEntity(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IEventPayload] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalEventPayload() (result aastypes.IEventPayload) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"SelfContained",
		"Expected",
		"EventPayload",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	instance, err := aasjsonization.EventPayloadFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize an instance of IEventPayload "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	var ok bool
	result, ok = instance.(aastypes.IEventPayload)
	if !ok {
		panic(
			fmt.Sprintf(
				"Expected to find an instance of IEventPayload at %s, "+
					"but got an instance of %T: %v",
				pth, instance, instance,
			),
		)
	}
	return
}

// Load a minimal example of [aastypes.IEventPayload] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalEventPayload() (result aastypes.IEventPayload) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"SelfContained",
		"Expected",
		"EventPayload",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	instance, err := aasjsonization.EventPayloadFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize an instance of IEventPayload "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	var ok bool
	result, ok = instance.(aastypes.IEventPayload)
	if !ok {
		panic(
			fmt.Sprintf(
				"Expected to find an instance of IEventPayload at %s, "+
					"but got an instance of %T: %v",
				pth, instance, instance,
			),
		)
	}
	return
}

// Load a maximal example of [aastypes.IBasicEventElement] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalBasicEventElement() (result aastypes.IBasicEventElement) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"BasicEventElement",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindBasicEventElement(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IBasicEventElement] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalBasicEventElement() (result aastypes.IBasicEventElement) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"BasicEventElement",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindBasicEventElement(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IOperation] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalOperation() (result aastypes.IOperation) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Operation",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindOperation(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IOperation] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalOperation() (result aastypes.IOperation) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Operation",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindOperation(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IOperationVariable] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalOperationVariable() (result aastypes.IOperationVariable) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"OperationVariable",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindOperationVariable(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IOperationVariable] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalOperationVariable() (result aastypes.IOperationVariable) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"OperationVariable",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindOperationVariable(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ICapability] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalCapability() (result aastypes.ICapability) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Capability",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindCapability(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ICapability] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalCapability() (result aastypes.ICapability) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Capability",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindCapability(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IConceptDescription] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalConceptDescription() (result aastypes.IConceptDescription) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"ConceptDescription",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindConceptDescription(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IConceptDescription] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalConceptDescription() (result aastypes.IConceptDescription) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"ConceptDescription",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindConceptDescription(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IReference] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalReference() (result aastypes.IReference) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Reference",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindReference(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IReference] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalReference() (result aastypes.IReference) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Reference",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindReference(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IKey] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalKey() (result aastypes.IKey) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Key",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindKey(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IKey] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalKey() (result aastypes.IKey) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"Key",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindKey(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ILangStringNameType] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalLangStringNameType() (result aastypes.ILangStringNameType) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringNameType",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringNameType(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ILangStringNameType] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalLangStringNameType() (result aastypes.ILangStringNameType) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringNameType",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringNameType(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ILangStringTextType] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalLangStringTextType() (result aastypes.ILangStringTextType) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringTextType",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringTextType(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ILangStringTextType] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalLangStringTextType() (result aastypes.ILangStringTextType) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringTextType",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringTextType(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IEnvironment] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalEnvironment() (result aastypes.IEnvironment) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"SelfContained",
		"Expected",
		"Environment",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	instance, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize an instance of IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	var ok bool
	result, ok = instance.(aastypes.IEnvironment)
	if !ok {
		panic(
			fmt.Sprintf(
				"Expected to find an instance of IEnvironment at %s, "+
					"but got an instance of %T: %v",
				pth, instance, instance,
			),
		)
	}
	return
}

// Load a minimal example of [aastypes.IEnvironment] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalEnvironment() (result aastypes.IEnvironment) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"SelfContained",
		"Expected",
		"Environment",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	instance, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize an instance of IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	var ok bool
	result, ok = instance.(aastypes.IEnvironment)
	if !ok {
		panic(
			fmt.Sprintf(
				"Expected to find an instance of IEnvironment at %s, "+
					"but got an instance of %T: %v",
				pth, instance, instance,
			),
		)
	}
	return
}

// Load a maximal example of [aastypes.IEmbeddedDataSpecification] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalEmbeddedDataSpecification() (result aastypes.IEmbeddedDataSpecification) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"EmbeddedDataSpecification",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindEmbeddedDataSpecification(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IEmbeddedDataSpecification] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalEmbeddedDataSpecification() (result aastypes.IEmbeddedDataSpecification) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"EmbeddedDataSpecification",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindEmbeddedDataSpecification(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ILevelType] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalLevelType() (result aastypes.ILevelType) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LevelType",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLevelType(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ILevelType] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalLevelType() (result aastypes.ILevelType) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LevelType",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLevelType(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IValueReferencePair] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalValueReferencePair() (result aastypes.IValueReferencePair) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"ValueReferencePair",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindValueReferencePair(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IValueReferencePair] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalValueReferencePair() (result aastypes.IValueReferencePair) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"ValueReferencePair",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindValueReferencePair(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IValueList] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalValueList() (result aastypes.IValueList) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"ValueList",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindValueList(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IValueList] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalValueList() (result aastypes.IValueList) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"ValueList",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindValueList(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ILangStringPreferredNameTypeIEC61360] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalLangStringPreferredNameTypeIEC61360() (result aastypes.ILangStringPreferredNameTypeIEC61360) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringPreferredNameTypeIec61360",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringPreferredNameTypeIEC61360(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ILangStringPreferredNameTypeIEC61360] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalLangStringPreferredNameTypeIEC61360() (result aastypes.ILangStringPreferredNameTypeIEC61360) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringPreferredNameTypeIec61360",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringPreferredNameTypeIEC61360(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ILangStringShortNameTypeIEC61360] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalLangStringShortNameTypeIEC61360() (result aastypes.ILangStringShortNameTypeIEC61360) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringShortNameTypeIec61360",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringShortNameTypeIEC61360(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ILangStringShortNameTypeIEC61360] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalLangStringShortNameTypeIEC61360() (result aastypes.ILangStringShortNameTypeIEC61360) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringShortNameTypeIec61360",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringShortNameTypeIEC61360(
		container,
	)
	return
}

// Load a maximal example of [aastypes.ILangStringDefinitionTypeIEC61360] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalLangStringDefinitionTypeIEC61360() (result aastypes.ILangStringDefinitionTypeIEC61360) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringDefinitionTypeIec61360",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringDefinitionTypeIEC61360(
		container,
	)
	return
}

// Load a minimal example of [aastypes.ILangStringDefinitionTypeIEC61360] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalLangStringDefinitionTypeIEC61360() (result aastypes.ILangStringDefinitionTypeIEC61360) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"LangStringDefinitionTypeIec61360",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindLangStringDefinitionTypeIEC61360(
		container,
	)
	return
}

// Load a maximal example of [aastypes.IDataSpecificationIEC61360] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMaximalDataSpecificationIEC61360() (result aastypes.IDataSpecificationIEC61360) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"DataSpecificationIec61360",
		"maximal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindDataSpecificationIEC61360(
		container,
	)
	return
}

// Load a minimal example of [aastypes.IDataSpecificationIEC61360] from
// the test data directory.
//
// If there is any error, panic.
func MustLoadMinimalDataSpecificationIEC61360() (result aastypes.IDataSpecificationIEC61360) {
	pth := path.Join(
		TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Expected",
		"DataSpecificationIec61360",
		"minimal.json",
	)

	jsonable := MustReadJsonable(pth)

	container, err := aasjsonization.EnvironmentFromJsonable(
		jsonable,
	)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to de-serialize the container as IEnvironment "+
					"from %s: %s",
				pth, err.Error(),
			),
		)
	}
	result = MustFindDataSpecificationIEC61360(
		container,
	)
	return
}

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_common_jsonization.py
// Do NOT edit or append.
