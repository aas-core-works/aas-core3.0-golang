package verification_test

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_verification_test.py
// Do NOT edit or append.

import (
	"fmt"
	aastesting "github.com/aas-core-works/aas-core3.0-golang/aastesting"
	aasjsonization "github.com/aas-core-works/aas-core3.0-golang/jsonization"
	aasverification "github.com/aas-core-works/aas-core3.0-golang/verification"
	"path/filepath"
	"sort"
	"testing"
)

func TestExtensionOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Extension",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestExtensionFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Extension",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAdministrativeInformationOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"AdministrativeInformation",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAdministrativeInformationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"AdministrativeInformation",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestQualifierOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Qualifier",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestQualifierFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Qualifier",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAssetAdministrationShellOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"AssetAdministrationShell",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAssetAdministrationShellFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"AssetAdministrationShell",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAssetInformationOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"AssetInformation",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAssetInformationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"AssetInformation",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestResourceOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Resource",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestResourceFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Resource",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSpecificAssetIDOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"SpecificAssetId",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSpecificAssetIDFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"SpecificAssetId",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Submodel",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Submodel",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestRelationshipElementOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"RelationshipElement",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestRelationshipElementFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"RelationshipElement",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelElementListOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"SubmodelElementList",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelElementListFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"SubmodelElementList",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestSubmodelElementCollectionOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"SubmodelElementCollection",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestSubmodelElementCollectionFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"SubmodelElementCollection",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestPropertyOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Property",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestPropertyFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Property",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestMultiLanguagePropertyOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"MultiLanguageProperty",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestMultiLanguagePropertyFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"MultiLanguageProperty",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestRangeOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Range",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestRangeFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Range",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestReferenceElementOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"ReferenceElement",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestReferenceElementFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"ReferenceElement",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestBlobOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Blob",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestBlobFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Blob",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestFileOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"File",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestFileFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"File",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestAnnotatedRelationshipElementOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"AnnotatedRelationshipElement",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestAnnotatedRelationshipElementFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"AnnotatedRelationshipElement",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEntityOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Entity",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEntityFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Entity",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEventPayloadOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"SelfContained",
			"Expected",
			"EventPayload",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EventPayloadFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEventPayloadFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"SelfContained",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"EventPayload",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EventPayloadFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestBasicEventElementOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"BasicEventElement",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestBasicEventElementFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"BasicEventElement",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestOperationOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Operation",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestOperationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Operation",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestOperationVariableOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"OperationVariable",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestOperationVariableFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"OperationVariable",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestCapabilityOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Capability",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestCapabilityFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Capability",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestConceptDescriptionOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"ConceptDescription",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestConceptDescriptionFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"ConceptDescription",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestReferenceOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Reference",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestReferenceFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Reference",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestKeyOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"Key",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestKeyFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Key",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringNameTypeOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringNameType",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringNameTypeFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"LangStringNameType",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringTextTypeOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringTextType",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringTextTypeFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"LangStringTextType",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEnvironmentOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"SelfContained",
			"Expected",
			"Environment",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEnvironmentFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"SelfContained",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"Environment",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestEmbeddedDataSpecificationOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"EmbeddedDataSpecification",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestEmbeddedDataSpecificationFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"EmbeddedDataSpecification",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLevelTypeOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LevelType",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLevelTypeFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"LevelType",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestValueReferencePairOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"ValueReferencePair",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestValueReferencePairFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"ValueReferencePair",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestValueListOK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"ValueList",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestValueListFail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"ValueList",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringPreferredNameTypeIEC61360OK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringPreferredNameTypeIec61360",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringPreferredNameTypeIEC61360Fail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"LangStringPreferredNameTypeIec61360",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringShortNameTypeIEC61360OK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringShortNameTypeIec61360",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringShortNameTypeIEC61360Fail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"LangStringShortNameTypeIec61360",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestLangStringDefinitionTypeIEC61360OK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"LangStringDefinitionTypeIec61360",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestLangStringDefinitionTypeIEC61360Fail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"LangStringDefinitionTypeIec61360",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

func TestDataSpecificationIEC61360OK(t *testing.T) {
	pths := aastesting.FindFilesBySuffixRecursively(
		filepath.Join(
			aastesting.TestDataDir,
			"Json",
			"ContainedInEnvironment",
			"Expected",
			"DataSpecificationIec61360",
		),
		".json",
	)
	sort.Strings(pths)

	for _, pth := range pths {
		jsonable := aastesting.MustReadJsonable(
			pth,
		)

		deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
			jsonable,
		)
		if deseriaErr != nil {
			t.Fatalf(
				"Unexpected deserialization error from %s: %s",
				pth, deseriaErr.Error(),
			)
			return
		}

		var errors []*aasverification.VerificationError
		aasverification.Verify(
			deserialized,
			func(veriErr *aasverification.VerificationError) (abort bool) {
				errors = append(errors, veriErr)
				return
			},
		)

		ok := assertNoVerificationErrors(
			t,
			deserialized,
			pth,
		)
		if !ok {
			return
		}
	}
}

func TestDataSpecificationIEC61360Fail(t *testing.T) {
	pattern := filepath.Join(
		aastesting.TestDataDir,
		"Json",
		"ContainedInEnvironment",
		"Unexpected",
		"Invalid",
		"*", // This asterisk represents the cause.
		"DataSpecificationIec61360",
	)

	causeDirs, err := filepath.Glob(pattern)
	if err != nil {
		panic(
			fmt.Sprintf(
				"Failed to find cause directories matching %s: %s",
				pattern, err.Error(),
			),
		)
	}

	for _, causeDir := range causeDirs {
		pths := aastesting.FindFilesBySuffixRecursively(
			causeDir,
			".json",
		)
		sort.Strings(pths)

		for _, pth := range pths {
			jsonable := aastesting.MustReadJsonable(
				pth,
			)

			relPth, err := filepath.Rel(aastesting.TestDataDir, pth)
			if err != nil {
				panic(
					fmt.Sprintf(
						"Failed to compute the relative path of %s to %s: %s",
						aastesting.TestDataDir, pth, err.Error(),
					),
				)
			}

			expectedPth := filepath.Join(
				aastesting.TestDataDir,
				"VerificationError",
				filepath.Dir(relPth),
				filepath.Base(relPth)+".errors",
			)

			deserialized, deseriaErr := aasjsonization.EnvironmentFromJsonable(
				jsonable,
			)
			if deseriaErr != nil {
				t.Fatalf(
					"Unexpected deserialization error from %s: %s",
					pth, deseriaErr.Error(),
				)
				return
			}

			var errors []*aasverification.VerificationError
			aasverification.Verify(
				deserialized,
				func(err *aasverification.VerificationError) (abort bool) {
					errors = append(errors, err)
					return
				},
			)

			ok := assertEqualsExpectedOrRerecordVerificationErrors(
				t,
				errors,
				pth,
				expectedPth,
			)
			if !ok {
				return
			}
		}
	}
}

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_verification_test.py
// Do NOT edit or append.
