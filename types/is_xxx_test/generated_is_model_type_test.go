// Test `IsXxx` functions.

package types_is_xxx_test

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_is_xxx_test.py
// Do NOT edit or append.

import (
	aastesting "github.com/aas-core-works/aas-core3.0-golang/aastesting"
	aastypes "github.com/aas-core-works/aas-core3.0-golang/types"
	"testing"
)

func TestIsXxxOnAnInstanceOfExtension(t *testing.T) {
	instance := aastesting.MustLoadMinimalExtension()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be true on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IExtension with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfAdministrativeInformation(t *testing.T) {
	instance := aastesting.MustLoadMinimalAdministrativeInformation()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be true on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IAdministrativeInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfQualifier(t *testing.T) {
	instance := aastesting.MustLoadMinimalQualifier()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be true on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IQualifier with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfAssetAdministrationShell(t *testing.T) {
	instance := aastesting.MustLoadMinimalAssetAdministrationShell()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be true on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be true on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IAssetAdministrationShell with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfAssetInformation(t *testing.T) {
	instance := aastesting.MustLoadMinimalAssetInformation()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be true on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IAssetInformation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfResource(t *testing.T) {
	instance := aastesting.MustLoadMinimalResource()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be true on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IResource with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfSpecificAssetID(t *testing.T) {
	instance := aastesting.MustLoadMinimalSpecificAssetID()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be true on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ISpecificAssetID with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfSubmodel(t *testing.T) {
	instance := aastesting.MustLoadMinimalSubmodel()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be true on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be true on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be true on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ISubmodel with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfRelationshipElement(t *testing.T) {
	instance := aastesting.MustLoadMinimalRelationshipElement()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be true on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfSubmodelElementList(t *testing.T) {
	instance := aastesting.MustLoadMinimalSubmodelElementList()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be true on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ISubmodelElementList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfSubmodelElementCollection(t *testing.T) {
	instance := aastesting.MustLoadMinimalSubmodelElementCollection()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be true on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ISubmodelElementCollection with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfProperty(t *testing.T) {
	instance := aastesting.MustLoadMinimalProperty()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be true on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be true on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfMultiLanguageProperty(t *testing.T) {
	instance := aastesting.MustLoadMinimalMultiLanguageProperty()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be true on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be true on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IMultiLanguageProperty with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfRange(t *testing.T) {
	instance := aastesting.MustLoadMinimalRange()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be true on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be true on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IRange with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfReferenceElement(t *testing.T) {
	instance := aastesting.MustLoadMinimalReferenceElement()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be true on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be true on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IReferenceElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfBlob(t *testing.T) {
	instance := aastesting.MustLoadMinimalBlob()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be true on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be true on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IBlob with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfFile(t *testing.T) {
	instance := aastesting.MustLoadMinimalFile()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be true on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be true on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IFile with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfAnnotatedRelationshipElement(t *testing.T) {
	instance := aastesting.MustLoadMinimalAnnotatedRelationshipElement()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be true on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be true on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IAnnotatedRelationshipElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfEntity(t *testing.T) {
	instance := aastesting.MustLoadMinimalEntity()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be true on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IEntity with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfEventPayload(t *testing.T) {
	instance := aastesting.MustLoadMinimalEventPayload()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be true on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IEventPayload with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfBasicEventElement(t *testing.T) {
	instance := aastesting.MustLoadMinimalBasicEventElement()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be true on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be true on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IBasicEventElement with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfOperation(t *testing.T) {
	instance := aastesting.MustLoadMinimalOperation()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be true on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IOperation with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfOperationVariable(t *testing.T) {
	instance := aastesting.MustLoadMinimalOperationVariable()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be true on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IOperationVariable with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfCapability(t *testing.T) {
	instance := aastesting.MustLoadMinimalCapability()

	if !aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be true on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be true on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be true on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be true on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ICapability with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfConceptDescription(t *testing.T) {
	instance := aastesting.MustLoadMinimalConceptDescription()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be true on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be true on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be true on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be true on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be true on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IConceptDescription with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfReference(t *testing.T) {
	instance := aastesting.MustLoadMinimalReference()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be true on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IReference with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfKey(t *testing.T) {
	instance := aastesting.MustLoadMinimalKey()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be true on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IKey with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfLangStringNameType(t *testing.T) {
	instance := aastesting.MustLoadMinimalLangStringNameType()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be true on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be true on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ILangStringNameType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfLangStringTextType(t *testing.T) {
	instance := aastesting.MustLoadMinimalLangStringTextType()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be true on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be true on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ILangStringTextType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfEnvironment(t *testing.T) {
	instance := aastesting.MustLoadMinimalEnvironment()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be true on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IEnvironment with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfEmbeddedDataSpecification(t *testing.T) {
	instance := aastesting.MustLoadMinimalEmbeddedDataSpecification()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be true on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IEmbeddedDataSpecification with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfLevelType(t *testing.T) {
	instance := aastesting.MustLoadMinimalLevelType()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be true on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ILevelType with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfValueReferencePair(t *testing.T) {
	instance := aastesting.MustLoadMinimalValueReferencePair()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be true on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IValueReferencePair with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfValueList(t *testing.T) {
	instance := aastesting.MustLoadMinimalValueList()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be true on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of IValueList with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfLangStringPreferredNameTypeIEC61360(t *testing.T) {
	instance := aastesting.MustLoadMinimalLangStringPreferredNameTypeIEC61360()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be true on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be true on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ILangStringPreferredNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfLangStringShortNameTypeIEC61360(t *testing.T) {
	instance := aastesting.MustLoadMinimalLangStringShortNameTypeIEC61360()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be true on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be true on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ILangStringShortNameTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfLangStringDefinitionTypeIEC61360(t *testing.T) {
	instance := aastesting.MustLoadMinimalLangStringDefinitionTypeIEC61360()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be true on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be true on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be false on an instance "+
				"of ILangStringDefinitionTypeIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

func TestIsXxxOnAnInstanceOfDataSpecificationIEC61360(t *testing.T) {
	instance := aastesting.MustLoadMinimalDataSpecificationIEC61360()

	if aastypes.IsHasSemantics(instance) {
		t.Errorf(
			"Expected IsHasSemantics to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsExtension(instance) {
		t.Errorf(
			"Expected IsExtension to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasExtensions(instance) {
		t.Errorf(
			"Expected IsHasExtensions to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferable(instance) {
		t.Errorf(
			"Expected IsReferable to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsIdentifiable(instance) {
		t.Errorf(
			"Expected IsIdentifiable to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasKind(instance) {
		t.Errorf(
			"Expected IsHasKind to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsHasDataSpecification(instance) {
		t.Errorf(
			"Expected IsHasDataSpecification to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAdministrativeInformation(instance) {
		t.Errorf(
			"Expected IsAdministrativeInformation to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifiable(instance) {
		t.Errorf(
			"Expected IsQualifiable to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsQualifier(instance) {
		t.Errorf(
			"Expected IsQualifier to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetAdministrationShell(instance) {
		t.Errorf(
			"Expected IsAssetAdministrationShell to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAssetInformation(instance) {
		t.Errorf(
			"Expected IsAssetInformation to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsResource(instance) {
		t.Errorf(
			"Expected IsResource to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSpecificAssetID(instance) {
		t.Errorf(
			"Expected IsSpecificAssetID to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodel(instance) {
		t.Errorf(
			"Expected IsSubmodel to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElement(instance) {
		t.Errorf(
			"Expected IsSubmodelElement to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRelationshipElement(instance) {
		t.Errorf(
			"Expected IsRelationshipElement to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementList(instance) {
		t.Errorf(
			"Expected IsSubmodelElementList to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsSubmodelElementCollection(instance) {
		t.Errorf(
			"Expected IsSubmodelElementCollection to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsDataElement(instance) {
		t.Errorf(
			"Expected IsDataElement to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsProperty(instance) {
		t.Errorf(
			"Expected IsProperty to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsMultiLanguageProperty(instance) {
		t.Errorf(
			"Expected IsMultiLanguageProperty to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsRange(instance) {
		t.Errorf(
			"Expected IsRange to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReferenceElement(instance) {
		t.Errorf(
			"Expected IsReferenceElement to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBlob(instance) {
		t.Errorf(
			"Expected IsBlob to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsFile(instance) {
		t.Errorf(
			"Expected IsFile to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAnnotatedRelationshipElement(instance) {
		t.Errorf(
			"Expected IsAnnotatedRelationshipElement to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEntity(instance) {
		t.Errorf(
			"Expected IsEntity to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventPayload(instance) {
		t.Errorf(
			"Expected IsEventPayload to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEventElement(instance) {
		t.Errorf(
			"Expected IsEventElement to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsBasicEventElement(instance) {
		t.Errorf(
			"Expected IsBasicEventElement to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperation(instance) {
		t.Errorf(
			"Expected IsOperation to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsOperationVariable(instance) {
		t.Errorf(
			"Expected IsOperationVariable to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsCapability(instance) {
		t.Errorf(
			"Expected IsCapability to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsConceptDescription(instance) {
		t.Errorf(
			"Expected IsConceptDescription to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsReference(instance) {
		t.Errorf(
			"Expected IsReference to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsKey(instance) {
		t.Errorf(
			"Expected IsKey to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsAbstractLangString(instance) {
		t.Errorf(
			"Expected IsAbstractLangString to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringNameType(instance) {
		t.Errorf(
			"Expected IsLangStringNameType to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringTextType(instance) {
		t.Errorf(
			"Expected IsLangStringTextType to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEnvironment(instance) {
		t.Errorf(
			"Expected IsEnvironment to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsDataSpecificationContent(instance) {
		t.Errorf(
			"Expected IsDataSpecificationContent to be true on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsEmbeddedDataSpecification(instance) {
		t.Errorf(
			"Expected IsEmbeddedDataSpecification to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLevelType(instance) {
		t.Errorf(
			"Expected IsLevelType to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueReferencePair(instance) {
		t.Errorf(
			"Expected IsValueReferencePair to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsValueList(instance) {
		t.Errorf(
			"Expected IsValueList to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringPreferredNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringPreferredNameTypeIEC61360 to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringShortNameTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringShortNameTypeIEC61360 to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if aastypes.IsLangStringDefinitionTypeIEC61360(instance) {
		t.Errorf(
			"Expected IsLangStringDefinitionTypeIEC61360 to be false on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}

	if !aastypes.IsDataSpecificationIEC61360(instance) {
		t.Errorf(
			"Expected IsDataSpecificationIEC61360 to be true on an instance "+
				"of IDataSpecificationIEC61360 with runtime type %T and with model type %v",
			instance, instance.ModelType(),
		)
	}
}

// This code has been automatically generated by:
// _dev_scripts/test_codegen/generate_is_xxx_test.py
// Do NOT edit or append.
